services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: book-db
    restart: always
    env_file:
      - docker/env.${ENVIRONMENT:-dev}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - book-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-book_management}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: book-backend
    restart: always
    env_file:
      - docker/env.${ENVIRONMENT:-dev}
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "3001:3001"
      - "9229:9229" # Debug port
    volumes:
      - ./src/backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - book-network
    depends_on:
      postgres:
        condition: service_healthy
    command: 
      - sh
      - -c
      - |
        if [ "$NODE_ENV" = "production" ]; then
          node dist/main.js
        else
          sleep 5 && pnpm run start:dev
        fi

  # Frontend (Nuxt.js)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: book-frontend
    restart: always
    env_file:
      - docker/env.${ENVIRONMENT:-dev}
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
      - "24678:24678" # HMR port
    volumes:
      - ./src/frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - book-network
    depends_on:
      - backend
    command:
      - sh
      - -c
      - |
        if [ "$NODE_ENV" = "production" ]; then
          node .output/server/index.mjs
        else
          sleep 10 && pnpm run dev --host 0.0.0.0
        fi

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:

networks:
  book-network:
    driver: bridge